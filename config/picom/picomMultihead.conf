# {{{ General
	# daemon = true;
# glx, xrender, xr_glx_hybrid. glx got better preformance
	backend = "glx";
	glx-no-stencil = true;
# Copy unmodified regions from front buffer instead of redrawing them all.
	# glx-copy-from-front = false;
# GLX backend: Avoid rebinding pixmap on window damage.
	glx-no-rebind-pixmap = true;
# Additionally use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users
	# xrender-sync-fence = true; 
# Vertical synchronization: match the refresh rate of the monitor
	vsync = true;
	refresh-rate = 60;
	# dbe = true;
# use damage information, otherwise cause the whole screen be redrawn every time
	use-damage = true;
	log-level = "info";
# Try to detect WM windows and mark them as active.
	mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
	mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events. Usually more reliable but depends on a EWMH-compliant WM.
	use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
	detect-rounded-corners = false;
# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
	detect-transient = true;
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
	detect-client-leader = true;
# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games. Known to cause flickering when redirecting/unredirecting windows.
	# unredir-if-possible = true;
# }}}

# {{{ shadow
	shadow = true;
	# detect-rounded-corners = true;
	shadow-radius = 10;
	shadow-opacity = 0.75;
	shadow-offset-x = -20;
	shadow-offset-y = -20;
	shadow-exclude = [
		#"name = 'Notification'",
		#"_GTK_FRAME_EXTENTS@:c"
		# "class_i ?= 'riotclientservices.exe'",
		# "class_g ?= 'slop'",
		# "class_g ?= 'Polybar'",
		# "class_g ?= 'Visualizer'",
		# "class_g ?= 'i3-frame'",
		# "_NET_WM_WINDOW_TYPE@:a *= 'SPLASH'",
		# "window_type = 'dropdown_menu'",
		# "window_type = 'menu'",
		# "window_type = 'popup_menu'",
		# "window_type = 'utility'",
		"name = 'Notification'",
		"class_g = 'Conky'",
		"class_g ?= 'Notify-osd'",
		"class_g = 'Cairo-clock'",
		"_GTK_FRAME_EXTENTS@:c",
		"class_g ?= 'firefox'",
		"class_g ?= 'anki'",
	];
# }}}

# {{{ fading
	fading = true;
	# fade-in-step = 0.03;
	# fade-out-step = 0.03;
# Opacity change between steps while fading in. (default 0.028)
	fade-in-step = 0.028;
# Opacity change between steps while fading out. (default 0.03)
	fade-out-step = 0.028;
	# no-fading-openclose = true;
	# no-fading-destroyed-argb = false;
	fade-delta = 10;
	fade-exclude = [
	  # "class_g = 'slop'",
	  # "class_g ?= 'firefox'",
	  # "window_type = 'dropdown_menu'",
	  # "window_type = 'popup_menu'"
	]
# }}}

# {{{ opacity
	frame-opacity = 1;
	detect-client-opacity = true;
	active-opacity = 1;
	inactive-opacity = 0.92;
	inactive-opacity-override = true;

	# popup_menu = { opacity = 1; }
	# dropdown_menu = { opacity = 1; }

	# opacity-rule = [
	#   #"100:window_type = 'normal'",
	#   "100:class_g    = 'firefox'",
	#   "100:class_g    = 'discord'",
	#   "100:class_g    = 'mpv'",
	#   "100:class_g    = 'Gimp'",
	#   "100:_NET_WM_STATE@[0]:32a = '_NET_WM_STATE_FULLSCREEN'",
	#   "100:_NET_WM_STATE@[1]:32a = '_NET_WM_STATE_FULLSCREEN'",
	#   "100:_NET_WM_STATE@[2]:32a = '_NET_WM_STATE_FULLSCREEN'",
	#   "100:_NET_WM_STATE@[3]:32a = '_NET_WM_STATE_FULLSCREEN'",
	#   "100:_NET_WM_STATE@[4]:32a = '_NET_WM_STATE_FULLSCREEN'"
	# ];
# }}}

# {{{ corner
	corner-radius = 20;
	# detect-rounded-corners = true;
	rounded-corners-exclude = [
		# "window_type = 'normal'",
		# "window_type = 'menu'",
		"window_type = 'dock'", # awesome wibox
		"window_type = 'popup_menu'",
		# "window_type = 'dropdown_menu'",
		"window_type = 'notification'",
	];
# }}}

transition-length = 300
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true


# {{{ blur 
# available: 'none' to disable, 'gaussian', 'box' or 'kernel' for custom convolution blur with --blur-kern. Note: 'gaussian' and 'box' require --experimental-backends.
	blur-method = "kernel";
# The strength level of the 'dual_kawase' blur method.
	blur-strength = 5;
# Specify the blur convolution kernel (copy from other guy, don't know what is this)
	blur-kern = "3x3box";
# Blur background of semi-transparent / ARGB windows. Bad in performance.
	blur-background = false;
# blur background of opaque windows with transparent frames as well
	blur-background-frame = false;
# don't let blur radius adjust based on window opacity
	blur-background-fixed = false;
# Exude conditions for background blur.
	blur-background-exclude = [
	  # "window_type = 'dock'",
	  #"window_type = 'desktop'",
	  "_GTK_FRAME_EXTENTS@:c"
	];
# }}}

# unknown, desktop, dock, toolbar, menu, utility, splash, dialog, normal, dropdown_menu, popup_menu, tooltip, notification, combo, dnd
	wintypes:
	{
	  normal = { fade = true; shadow = false; opacity = 1; }
	  tooltip = { fade = false; shadow = false; opacity = .95; focus = true; full-shadow = true; };
	  dock = { shadow = false; fade = false; opacity = .95; }
	  dnd = { shadow = false; fade = false; opacity = .95; }
	  popup_menu = { opacity = .95; }
	  dropdown_menu = { opacity = .95; }
	};

# # {{{ animation
# turn on animation
	animations: false;
# tension, default: 200.0
	animation-stiffness = 110;
# default: 1.0
	animation-window-mass = 0.5;
# friction, default 25.0
	animation-dampening = 20;
# Whether to clamp animations
	animation-clamping = false; 
# fly-in, zoom, slide-down, slide-up, slide-left, slide-right 
	animation-for-open-window = "zoom";
# The time between steps in animation, in milliseconds. (> 0, defaults to 10).
	animation-delta = 10;
# when minimize window, fly-in, zoom, slide-down, slide-up, slide-left, slide-right, slide-in, slide-out 
	animation-for-unmap-window = "slide-up";
# drop-down, pop-up window...
	animation-for-transient-window = "slide-down";
	# animation-for-workspace-switch-in = "slide-right";
	# animation-for-workspace-switch-out = "auto";
# }}}
